// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLowerSchools(t *testing.T) {
	t.Parallel()

	query := LowerSchools()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLowerSchoolsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LowerSchool{}
	if err = randomize.Struct(seed, o, lowerSchoolDBTypes, true, lowerSchoolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LowerSchools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLowerSchoolsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LowerSchool{}
	if err = randomize.Struct(seed, o, lowerSchoolDBTypes, true, lowerSchoolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := LowerSchools().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LowerSchools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLowerSchoolsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LowerSchool{}
	if err = randomize.Struct(seed, o, lowerSchoolDBTypes, true, lowerSchoolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LowerSchoolSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LowerSchools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLowerSchoolsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LowerSchool{}
	if err = randomize.Struct(seed, o, lowerSchoolDBTypes, true, lowerSchoolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LowerSchoolExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if LowerSchool exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LowerSchoolExists to return true, but got false.")
	}
}

func testLowerSchoolsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LowerSchool{}
	if err = randomize.Struct(seed, o, lowerSchoolDBTypes, true, lowerSchoolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	lowerSchoolFound, err := FindLowerSchool(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if lowerSchoolFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLowerSchoolsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LowerSchool{}
	if err = randomize.Struct(seed, o, lowerSchoolDBTypes, true, lowerSchoolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = LowerSchools().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testLowerSchoolsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LowerSchool{}
	if err = randomize.Struct(seed, o, lowerSchoolDBTypes, true, lowerSchoolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := LowerSchools().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLowerSchoolsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	lowerSchoolOne := &LowerSchool{}
	lowerSchoolTwo := &LowerSchool{}
	if err = randomize.Struct(seed, lowerSchoolOne, lowerSchoolDBTypes, false, lowerSchoolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}
	if err = randomize.Struct(seed, lowerSchoolTwo, lowerSchoolDBTypes, false, lowerSchoolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = lowerSchoolOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lowerSchoolTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LowerSchools().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLowerSchoolsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	lowerSchoolOne := &LowerSchool{}
	lowerSchoolTwo := &LowerSchool{}
	if err = randomize.Struct(seed, lowerSchoolOne, lowerSchoolDBTypes, false, lowerSchoolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}
	if err = randomize.Struct(seed, lowerSchoolTwo, lowerSchoolDBTypes, false, lowerSchoolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = lowerSchoolOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lowerSchoolTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LowerSchools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func lowerSchoolBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *LowerSchool) error {
	*o = LowerSchool{}
	return nil
}

func lowerSchoolAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *LowerSchool) error {
	*o = LowerSchool{}
	return nil
}

func lowerSchoolAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *LowerSchool) error {
	*o = LowerSchool{}
	return nil
}

func lowerSchoolBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LowerSchool) error {
	*o = LowerSchool{}
	return nil
}

func lowerSchoolAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LowerSchool) error {
	*o = LowerSchool{}
	return nil
}

func lowerSchoolBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LowerSchool) error {
	*o = LowerSchool{}
	return nil
}

func lowerSchoolAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LowerSchool) error {
	*o = LowerSchool{}
	return nil
}

func lowerSchoolBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LowerSchool) error {
	*o = LowerSchool{}
	return nil
}

func lowerSchoolAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LowerSchool) error {
	*o = LowerSchool{}
	return nil
}

func testLowerSchoolsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &LowerSchool{}
	o := &LowerSchool{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, lowerSchoolDBTypes, false); err != nil {
		t.Errorf("Unable to randomize LowerSchool object: %s", err)
	}

	AddLowerSchoolHook(boil.BeforeInsertHook, lowerSchoolBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	lowerSchoolBeforeInsertHooks = []LowerSchoolHook{}

	AddLowerSchoolHook(boil.AfterInsertHook, lowerSchoolAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	lowerSchoolAfterInsertHooks = []LowerSchoolHook{}

	AddLowerSchoolHook(boil.AfterSelectHook, lowerSchoolAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	lowerSchoolAfterSelectHooks = []LowerSchoolHook{}

	AddLowerSchoolHook(boil.BeforeUpdateHook, lowerSchoolBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	lowerSchoolBeforeUpdateHooks = []LowerSchoolHook{}

	AddLowerSchoolHook(boil.AfterUpdateHook, lowerSchoolAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	lowerSchoolAfterUpdateHooks = []LowerSchoolHook{}

	AddLowerSchoolHook(boil.BeforeDeleteHook, lowerSchoolBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	lowerSchoolBeforeDeleteHooks = []LowerSchoolHook{}

	AddLowerSchoolHook(boil.AfterDeleteHook, lowerSchoolAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	lowerSchoolAfterDeleteHooks = []LowerSchoolHook{}

	AddLowerSchoolHook(boil.BeforeUpsertHook, lowerSchoolBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	lowerSchoolBeforeUpsertHooks = []LowerSchoolHook{}

	AddLowerSchoolHook(boil.AfterUpsertHook, lowerSchoolAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	lowerSchoolAfterUpsertHooks = []LowerSchoolHook{}
}

func testLowerSchoolsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LowerSchool{}
	if err = randomize.Struct(seed, o, lowerSchoolDBTypes, true, lowerSchoolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LowerSchools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLowerSchoolsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LowerSchool{}
	if err = randomize.Struct(seed, o, lowerSchoolDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(lowerSchoolColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := LowerSchools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLowerSchoolToOneSchoolUsingSchool(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local LowerSchool
	var foreign School

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, lowerSchoolDBTypes, false, lowerSchoolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, schoolDBTypes, false, schoolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize School struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SchoolID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.School().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddSchoolHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *School) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := LowerSchoolSlice{&local}
	if err = local.L.LoadSchool(ctx, tx, false, (*[]*LowerSchool)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.School == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.School = nil
	if err = local.L.LoadSchool(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.School == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testLowerSchoolToOneSetOpSchoolUsingSchool(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LowerSchool
	var b, c School

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lowerSchoolDBTypes, false, strmangle.SetComplement(lowerSchoolPrimaryKeyColumns, lowerSchoolColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, schoolDBTypes, false, strmangle.SetComplement(schoolPrimaryKeyColumns, schoolColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, schoolDBTypes, false, strmangle.SetComplement(schoolPrimaryKeyColumns, schoolColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*School{&b, &c} {
		err = a.SetSchool(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.School != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LowerSchools[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SchoolID != x.ID {
			t.Error("foreign key was wrong value", a.SchoolID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SchoolID))
		reflect.Indirect(reflect.ValueOf(&a.SchoolID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SchoolID != x.ID {
			t.Error("foreign key was wrong value", a.SchoolID, x.ID)
		}
	}
}

func testLowerSchoolsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LowerSchool{}
	if err = randomize.Struct(seed, o, lowerSchoolDBTypes, true, lowerSchoolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLowerSchoolsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LowerSchool{}
	if err = randomize.Struct(seed, o, lowerSchoolDBTypes, true, lowerSchoolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LowerSchoolSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLowerSchoolsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LowerSchool{}
	if err = randomize.Struct(seed, o, lowerSchoolDBTypes, true, lowerSchoolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LowerSchools().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	lowerSchoolDBTypes = map[string]string{`ID`: `int`, `SchoolID`: `int`, `Name`: `varchar`, `Style`: `text`, `Enemy`: `varchar`}
	_                  = bytes.MinRead
)

func testLowerSchoolsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(lowerSchoolPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(lowerSchoolAllColumns) == len(lowerSchoolPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LowerSchool{}
	if err = randomize.Struct(seed, o, lowerSchoolDBTypes, true, lowerSchoolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LowerSchools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lowerSchoolDBTypes, true, lowerSchoolPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLowerSchoolsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(lowerSchoolAllColumns) == len(lowerSchoolPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LowerSchool{}
	if err = randomize.Struct(seed, o, lowerSchoolDBTypes, true, lowerSchoolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LowerSchools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lowerSchoolDBTypes, true, lowerSchoolPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(lowerSchoolAllColumns, lowerSchoolPrimaryKeyColumns) {
		fields = lowerSchoolAllColumns
	} else {
		fields = strmangle.SetComplement(
			lowerSchoolAllColumns,
			lowerSchoolPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LowerSchoolSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLowerSchoolsUpsert(t *testing.T) {
	t.Parallel()

	if len(lowerSchoolAllColumns) == len(lowerSchoolPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLLowerSchoolUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := LowerSchool{}
	if err = randomize.Struct(seed, &o, lowerSchoolDBTypes, false); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LowerSchool: %s", err)
	}

	count, err := LowerSchools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, lowerSchoolDBTypes, false, lowerSchoolPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LowerSchool struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LowerSchool: %s", err)
	}

	count, err = LowerSchools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
