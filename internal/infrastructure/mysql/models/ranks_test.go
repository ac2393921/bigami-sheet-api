// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRanks(t *testing.T) {
	t.Parallel()

	query := Ranks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRanksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rank{}
	if err = randomize.Struct(seed, o, rankDBTypes, true, rankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Ranks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRanksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rank{}
	if err = randomize.Struct(seed, o, rankDBTypes, true, rankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Ranks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Ranks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRanksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rank{}
	if err = randomize.Struct(seed, o, rankDBTypes, true, rankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RankSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Ranks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRanksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rank{}
	if err = randomize.Struct(seed, o, rankDBTypes, true, rankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RankExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Rank exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RankExists to return true, but got false.")
	}
}

func testRanksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rank{}
	if err = randomize.Struct(seed, o, rankDBTypes, true, rankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	rankFound, err := FindRank(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if rankFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRanksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rank{}
	if err = randomize.Struct(seed, o, rankDBTypes, true, rankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Ranks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRanksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rank{}
	if err = randomize.Struct(seed, o, rankDBTypes, true, rankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Ranks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRanksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rankOne := &Rank{}
	rankTwo := &Rank{}
	if err = randomize.Struct(seed, rankOne, rankDBTypes, false, rankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}
	if err = randomize.Struct(seed, rankTwo, rankDBTypes, false, rankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = rankOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rankTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Ranks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRanksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	rankOne := &Rank{}
	rankTwo := &Rank{}
	if err = randomize.Struct(seed, rankOne, rankDBTypes, false, rankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}
	if err = randomize.Struct(seed, rankTwo, rankDBTypes, false, rankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = rankOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rankTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ranks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func rankBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Rank) error {
	*o = Rank{}
	return nil
}

func rankAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Rank) error {
	*o = Rank{}
	return nil
}

func rankAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Rank) error {
	*o = Rank{}
	return nil
}

func rankBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Rank) error {
	*o = Rank{}
	return nil
}

func rankAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Rank) error {
	*o = Rank{}
	return nil
}

func rankBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Rank) error {
	*o = Rank{}
	return nil
}

func rankAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Rank) error {
	*o = Rank{}
	return nil
}

func rankBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Rank) error {
	*o = Rank{}
	return nil
}

func rankAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Rank) error {
	*o = Rank{}
	return nil
}

func testRanksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Rank{}
	o := &Rank{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, rankDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Rank object: %s", err)
	}

	AddRankHook(boil.BeforeInsertHook, rankBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	rankBeforeInsertHooks = []RankHook{}

	AddRankHook(boil.AfterInsertHook, rankAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	rankAfterInsertHooks = []RankHook{}

	AddRankHook(boil.AfterSelectHook, rankAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	rankAfterSelectHooks = []RankHook{}

	AddRankHook(boil.BeforeUpdateHook, rankBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	rankBeforeUpdateHooks = []RankHook{}

	AddRankHook(boil.AfterUpdateHook, rankAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	rankAfterUpdateHooks = []RankHook{}

	AddRankHook(boil.BeforeDeleteHook, rankBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	rankBeforeDeleteHooks = []RankHook{}

	AddRankHook(boil.AfterDeleteHook, rankAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	rankAfterDeleteHooks = []RankHook{}

	AddRankHook(boil.BeforeUpsertHook, rankBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	rankBeforeUpsertHooks = []RankHook{}

	AddRankHook(boil.AfterUpsertHook, rankAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	rankAfterUpsertHooks = []RankHook{}
}

func testRanksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rank{}
	if err = randomize.Struct(seed, o, rankDBTypes, true, rankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ranks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRanksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rank{}
	if err = randomize.Struct(seed, o, rankDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(rankColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Ranks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRanksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rank{}
	if err = randomize.Struct(seed, o, rankDBTypes, true, rankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRanksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rank{}
	if err = randomize.Struct(seed, o, rankDBTypes, true, rankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RankSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRanksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rank{}
	if err = randomize.Struct(seed, o, rankDBTypes, true, rankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Ranks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	rankDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar`}
	_           = bytes.MinRead
)

func testRanksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(rankPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(rankAllColumns) == len(rankPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Rank{}
	if err = randomize.Struct(seed, o, rankDBTypes, true, rankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ranks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rankDBTypes, true, rankPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRanksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(rankAllColumns) == len(rankPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Rank{}
	if err = randomize.Struct(seed, o, rankDBTypes, true, rankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ranks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rankDBTypes, true, rankPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(rankAllColumns, rankPrimaryKeyColumns) {
		fields = rankAllColumns
	} else {
		fields = strmangle.SetComplement(
			rankAllColumns,
			rankPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RankSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRanksUpsert(t *testing.T) {
	t.Parallel()

	if len(rankAllColumns) == len(rankPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLRankUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Rank{}
	if err = randomize.Struct(seed, &o, rankDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Rank: %s", err)
	}

	count, err := Ranks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, rankDBTypes, false, rankPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Rank struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Rank: %s", err)
	}

	count, err = Ranks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
