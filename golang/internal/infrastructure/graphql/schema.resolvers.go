package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"

	_ "github.com/go-sql-driver/mysql"

	"github.com/ac2393921/bigami-sheet-api/internal/contoller"
	"github.com/ac2393921/bigami-sheet-api/internal/infrastructure/graphql/model"
	infra "github.com/ac2393921/bigami-sheet-api/internal/infrastructure/mysql"
	"github.com/ac2393921/bigami-sheet-api/internal/infrastructure/mysql/repository"
	"github.com/ac2393921/bigami-sheet-api/internal/usecase"
)

// Schools is the resolver for the schools field.
func (r *queryResolver) Schools(ctx context.Context) ([]*model.School, error) {
	// Todo: UseCaseに書く & Resolverで呼び出す
	// DBからEntityを取得

	
	sqlHandler := infra.NewSqlHandler()
	rep := repository.NewSchoolRepository(sqlHandler.Conn)
	u := usecase.NewFetchAllSchoolsUsecase(rep)
	c := contoller.NewSchoolController(u)
	
	result, err := u.Handle(ctx)
	if err != nil {
		return nil, err
	}

	// EntityをGraphQLのモデルに変換
	var schools []*model.School
	for _, r := range result {
		schools = append(schools, &model.School{
			ID:    r.ID,
			Name:  r.Name,
			Style: r.Style,
			Enemy: r.Enemy,
		})
	}

	return schools, nil
}

// LowerSchools is the resolver for the lower_schools field.
func (r *queryResolver) LowerSchools(ctx context.Context) ([]*model.LowerSchool, error) {
	return []*model.LowerSchool{
		{
			ID:       "LOWERSCHOOL-1",
			SchoolID: "SCHOOL-1",
			Name:     "鍔鑿組",
			Style:    "感情に動かされず、任務をまっとうする。",
			Enemy:    "鞍馬神流",
		},
	}, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
