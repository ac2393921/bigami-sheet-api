// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("LowerSchools", testLowerSchools)
	t.Run("Ranks", testRanks)
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("Schools", testSchools)
}

func TestDelete(t *testing.T) {
	t.Run("LowerSchools", testLowerSchoolsDelete)
	t.Run("Ranks", testRanksDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("Schools", testSchoolsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("LowerSchools", testLowerSchoolsQueryDeleteAll)
	t.Run("Ranks", testRanksQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("Schools", testSchoolsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("LowerSchools", testLowerSchoolsSliceDeleteAll)
	t.Run("Ranks", testRanksSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("Schools", testSchoolsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("LowerSchools", testLowerSchoolsExists)
	t.Run("Ranks", testRanksExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("Schools", testSchoolsExists)
}

func TestFind(t *testing.T) {
	t.Run("LowerSchools", testLowerSchoolsFind)
	t.Run("Ranks", testRanksFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("Schools", testSchoolsFind)
}

func TestBind(t *testing.T) {
	t.Run("LowerSchools", testLowerSchoolsBind)
	t.Run("Ranks", testRanksBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("Schools", testSchoolsBind)
}

func TestOne(t *testing.T) {
	t.Run("LowerSchools", testLowerSchoolsOne)
	t.Run("Ranks", testRanksOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("Schools", testSchoolsOne)
}

func TestAll(t *testing.T) {
	t.Run("LowerSchools", testLowerSchoolsAll)
	t.Run("Ranks", testRanksAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("Schools", testSchoolsAll)
}

func TestCount(t *testing.T) {
	t.Run("LowerSchools", testLowerSchoolsCount)
	t.Run("Ranks", testRanksCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("Schools", testSchoolsCount)
}

func TestHooks(t *testing.T) {
	t.Run("LowerSchools", testLowerSchoolsHooks)
	t.Run("Ranks", testRanksHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
	t.Run("Schools", testSchoolsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("LowerSchools", testLowerSchoolsInsert)
	t.Run("LowerSchools", testLowerSchoolsInsertWhitelist)
	t.Run("Ranks", testRanksInsert)
	t.Run("Ranks", testRanksInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("Schools", testSchoolsInsert)
	t.Run("Schools", testSchoolsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("LowerSchoolToSchoolUsingSchool", testLowerSchoolToOneSchoolUsingSchool)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("SchoolToLowerSchools", testSchoolToManyLowerSchools)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("LowerSchoolToSchoolUsingLowerSchools", testLowerSchoolToOneSetOpSchoolUsingSchool)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("SchoolToLowerSchools", testSchoolToManyAddOpLowerSchools)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("LowerSchools", testLowerSchoolsReload)
	t.Run("Ranks", testRanksReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("Schools", testSchoolsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("LowerSchools", testLowerSchoolsReloadAll)
	t.Run("Ranks", testRanksReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("Schools", testSchoolsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("LowerSchools", testLowerSchoolsSelect)
	t.Run("Ranks", testRanksSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("Schools", testSchoolsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("LowerSchools", testLowerSchoolsUpdate)
	t.Run("Ranks", testRanksUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("Schools", testSchoolsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("LowerSchools", testLowerSchoolsSliceUpdateAll)
	t.Run("Ranks", testRanksSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("Schools", testSchoolsSliceUpdateAll)
}
